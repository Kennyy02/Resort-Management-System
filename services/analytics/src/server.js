const express = require('express');
const mysql = require('mysql2/promise');
const cors = require('cors');

const app = express();
// CRITICAL FIX: Use the port provided by the hosting environment (Railway)
const dynamicPort = process.env.PORT || 3002;

const allowedOrigins = [
Â  Â  'https://emzbayviewmountainresort.up.railway.app', // CORS FIX
Â  Â  'http://localhost:3000',Â 
Â  Â  'http://localhost:3001',
Â  Â  'http://localhost:3002'Â 
];

const corsOptions = {
Â  Â  origin: function (origin, callback) {
Â  Â  Â  Â  if (!origin || allowedOrigins.indexOf(origin) !== -1) {
Â  Â  Â  Â  Â  Â  callback(null, true);
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  callback(new Error('Not allowed by CORS'));
Â  Â  Â  Â  }
Â  Â  },
Â  Â  methods: "GET,HEAD,PUT,PATCH,POST,DELETE",
Â  Â  credentials: true,
};

app.use(express.json());
app.use(cors(corsOptions));

const pool = mysql.createPool({
Â  Â  host: process.env.DB_HOST,
Â  Â  user: process.env.DB_USER,
Â  Â  password: process.env.DB_PASSWORD,
Â  Â  database: process.env.DB_NAME,
Â  Â  port: process.env.DB_PORT || 3306,
Â  Â  waitForConnections: true,
Â  Â  connectionLimit: 10,
Â  Â  queueLimit: 0
});

app.get('/test-db', async (req, res) => {
Â  Â  try {
Â  Â  Â  Â  const [rows] = await pool.query('SELECT 1 + 1 AS solution');
Â  Â  Â  Â  res.json({ message: 'Database connected successfully!', solution: rows[0].solution });
Â  Â  } catch (error) {
Â  Â  Â  Â  console.error('Database connection failed:', error);
Â  Â  Â  Â  res.status(500).json({ error: 'Database connection failed', details: error.message });
Â  Â  }
});

app.get('/api/analytics/bookings-by-month', async (req, res) => {
Â  Â  try {
        // FIX: Added .trim() to clean up leading/trailing whitespace
Â  Â  Â  Â  const query = `
Â  Â  Â  Â  Â  Â  SELECT
Â  Â  Â  Â  Â  Â  Â  Â  YEAR(checkInDate) AS booking_year,
Â  Â  Â  Â  Â  Â  Â  Â  MONTH(checkInDate) AS booking_month,
Â  Â  Â  Â  Â  Â  Â  Â  COUNT(*) AS total_bookings
Â  Â  Â  Â  Â  Â  FROM bookings
Â  Â  Â  Â  Â  Â  GROUP BY booking_year, booking_month
Â  Â  Â  Â  Â  Â  ORDER BY booking_year, booking_month;
Â  Â  Â  Â  `.trim();
Â  Â  Â  Â  const [rows] = await pool.query(query);
Â  Â  Â  Â  res.json(rows);
Â  Â  } catch (error) {
Â  Â  Â  Â  console.error('Error fetching monthly booking trends:', error);
Â  Â  Â  Â  res.status(500).json({ error: 'Internal server error', details: error.message });
Â  Â  }
});

app.get('/api/analytics/revenue-by-month', async (req, res) => {
Â  Â  try {
        // FIX: Added .trim() to clean up leading/trailing whitespace
Â  Â  Â  Â  const query = `
Â  Â  Â  Â  Â  Â  SELECT
Â  Â  Â  Â  Â  Â  Â  Â  YEAR(transaction_timestamp) AS revenue_year,
Â  Â  Â  Â  Â  Â  Â  Â  MONTH(transaction_timestamp) AS revenue_month,
Â  Â  Â  Â  Â  Â  Â  Â  SUM(amount) AS total_revenue
Â  Â  Â  Â  Â  Â  FROM transactions
Â  Â  Â  Â  Â  Â  WHERE transaction_type = 'Booking'
Â  Â  Â  Â  Â  Â  GROUP BY revenue_year, revenue_month
Â  Â  Â  Â  Â  Â  ORDER BY revenue_year, revenue_month;
Â  Â  Â  Â  `.trim();
Â  Â  Â  Â  const [rows] = await pool.query(query);
Â  Â  Â  Â  res.json(rows);
Â  Â  } catch (error) {
Â  Â  Â  Â  console.error('Error fetching monthly revenue trends:', error);
Â  Â  Â  Â  res.status(500).json({ error: 'Internal server error', details: error.message });
Â  Â  }
});

app.get('/api/analytics/bookings-by-service', async (req, res) => {
Â  Â  try {
        // FIX: Added .trim() to clean up leading/trailing whitespace
Â  Â  Â  Â  const query = `
Â  Â  Â  Â  Â  Â  SELECT
Â  Â  Â  Â  Â  Â  Â  Â  serviceName,
Â  Â  Â  Â  Â  Â  Â  Â  COUNT(*) AS total_bookings
Â  Â  Â  Â  Â  Â  FROM bookings
Â  Â  Â  Â  Â  Â  GROUP BY serviceName
Â  Â  Â  Â  Â  Â  ORDER BY total_bookings DESC;
Â  Â  Â  Â  `.trim();
Â  Â  Â  Â  const [rows] = await pool.query(query);
Â  Â  Â  Â  res.json(rows);
Â  Â  } catch (error) {
Â  Â  Â  Â  console.error('Error fetching bookings by service type:', error);
Â  Â  Â  Â  res.status(500).json({ error: 'Internal server error', details: error.message });
Â  Â  }
});

app.get('/api/analytics/summary/total-bookings-month', async (req, res) => {
Â  Â  try {
        // FIX: Added .trim() to clean up leading/trailing whitespace
Â  Â  Â  Â  const query = `
Â  Â  Â  Â  Â  Â  SELECT COUNT(*) AS total_bookings
Â  Â  Â  Â  Â  Â  FROM bookings
Â  Â  Â  Â  Â  Â  WHERE MONTH(checkInDate) = MONTH(CURDATE()) AND YEAR(checkInDate) = 2025;
Â  Â  Â  Â  `.trim();
Â  Â  Â  Â  const [rows] = await pool.query(query);
Â  Â  Â  Â  res.json(rows[0] || { total_bookings: 0 });
Â  Â  } catch (error) {
Â  Â  Â  Â  console.error('Error fetching total bookings for month:', error);
Â  Â  Â  Â  res.status(500).json({ error: 'Internal server error', details: error.message });
Â  Â  }
});

app.get('/api/analytics/summary/total-revenue-month', async (req, res) => {
Â  Â  try {
        // FIX: Added .trim() to clean up leading/trailing whitespace
Â  Â  Â  Â  const query = `
Â  Â  Â  Â  Â  Â  SELECT SUM(amount) AS total_revenue
Â  Â  Â  Â  Â  Â  FROM transactions
Â  Â  Â  Â  Â  Â  WHERE transaction_type = 'Booking'
Â  Â  Â  Â  Â  Â  AND MONTH(transaction_timestamp) = MONTH(CURDATE()) AND YEAR(transaction_timestamp) = 2025;
Â  Â  Â  Â  `.trim();
Â  Â  Â  Â  const [rows] = await pool.query(query);
Â  Â  Â  Â  res.json(rows[0] || { total_revenue: 0 });
Â  Â  } catch (error) {
Â  Â  Â  Â  console.error('Error fetching total revenue for month:', error);
Â  Â  Â  Â  res.status(500).json({ error: 'Internal server error', details: error.message });
Â  Â  }
});

app.get('/api/analytics/payment-methods', async (req, res) => {
Â  Â  try {
        // FIX: Added .trim() to clean up leading/trailing whitespace
Â  Â  Â  Â  const query = `
Â  Â  Â  Â  Â  Â  SELECT
Â  Â  Â  Â  Â  Â  Â  Â  modeOfPayment,
Â  Â  Â  Â  Â  Â  Â  Â  COUNT(*) AS total_payments,
Â  Â  Â  Â  Â  Â  Â  Â  SUM(amount) AS total_revenue
Â  Â  Â  Â  Â  Â  FROM transactions
Â  Â  Â  Â  Â  Â  WHERE transaction_type = 'Booking'
Â  Â  Â  Â  Â  Â  GROUP BY modeOfPayment
Â  Â  Â  Â  Â  Â  ORDER BY total_revenue DESC;
Â  Â  Â  Â  `.trim();
Â  Â  Â  Â  const [rows] = await pool.query(query);
Â  Â  Â  Â  res.json(rows);
Â  Â  } catch (error) {
Â  Â  Â  Â  console.error('Error fetching payment methods:', error);
Â  Â  Â  Â  res.status(500).json({ error: 'Internal server error', details: error.message });
Â  Â  }
});

app.listen(dynamicPort, () => {
Â  Â  console.log(`ðŸš€ Analytics server running on http://localhost:${dynamicPort}`);
});
